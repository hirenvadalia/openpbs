/*
 * Copyright (C) 1994-2020 Altair Engineering, Inc.
 * For more information, contact Altair at www.altair.com.
 *
 * This file is part of the PBS Professional ("PBS Pro") software.
 *
 * Open Source License Information:
 *
 * PBS Pro is free software. You can redistribute it and/or modify it under the
 * terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * PBS Pro is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Commercial License Information:
 *
 * For a copy of the commercial license terms and conditions,
 * go to: (http://www.pbspro.com/UserArea/agreement.html)
 * or contact the Altair Legal Department.
 *
 * Altair’s dual-license business model allows companies, individuals, and
 * organizations to create proprietary derivative works of PBS Pro and
 * distribute them - whether embedded or bundled with other software -
 * under a commercial license agreement.
 *
 * Use of Altair’s trademarks, including but not limited to "PBS™",
 * "PBS Professional®", and "PBS Pro™" and Altair’s logos is subject to Altair's
 * trademark licensing policies.
 *
 */

#include <pbs_config.h> /* the master config generated by configure */
#include <errno.h>
#include "pbs_ifl.h"
#include "libpbs.h"
#include "log.h"
#include "mom_server.h"
#include "placementsets.h"

// FIXME: move below to appropriate place
typedef struct resc_used_update rused_t;
typedef struct batch_request breq_t;
typedef struct batch_reply breply_t;

typedef struct jinfo {
	jinfo_t *next;
	char *jid;
	int substate;
	long runver;
	char *exec_vnode;
} jinfo_t;

typedef struct hook_chksums {
	hook_chksums_t *next;
	unsigned long hk_chksum;
	unsigned long py_chksum;
	unsigned long cf_chksum;
} hook_chksums_t;

/**********************************************/
typedef struct is_null {
	int is_retry;
	int is_highwater;
} is_null_t;

typedef struct is_update {
	int is_state;
	int is_phycpu;
	int is_availcpu;
	unsigned long long is_phymem;
	char *is_arch;
	vnl_t *is_vnlp;
	char *is_version;
} is_update_t;

typedef struct is_idle {
	int is_which;
	char *is_jobid;
} is_idle_t;

typedef struct is_discard_job {
	char *is_jobid;
	int is_runver;
} is_discard_job_t;

typedef struct is_hello {
	int is_opts;
	jinfo_t *is_jinfo;
} is_hello_t;

typedef struct is_addr_info {
	is_addr_info_t *is_next;
	u_long is_addr;
	u_long is_depth;
} is_addr_info_t;

typedef struct is_update_from_hook {
	unsigned long is_seq;
	char *is_user;
	vnl_t *is_vnlp;
} is_update_from_hook_t;

typedef struct is_hj_action {
	is_hj_action_t *is_next;
	char *is_jid;
	unsigned long is_seq;
	int is_runver;
	int is_action;
} is_hj_action_t;

typedef struct is_hact_ack {
	int is_act_type;
	unsigned long is_act_seq;
} is_hact_ack_t;

typedef struct is_hook_chksums {
	hook_chksums_t *is_hchksums;
	unsigned long is_rescdef_chksum;
} is_hook_chksums_t;

typedef union is_req {
	is_null_t is_null; /* IS_NULL */
	/* no info for IS_HELLO */
	is_update_t is_update; /* IS_UPDATE and IS_UPDATE2 */
	rused_t *is_rused; /* IS_RESCUSED, IS_JOBOBIT and IS_RESCUSED_FROM_HOOK */
	char *is_jobid; /* IS_BADOBIT and IS_ACKOBIT */
	int is_port; /* IS_RESTART */
	/* no info for IS_SHUTDOWN */
	is_idle_t is_idle; /* IS_IDLE */
	/* no info for IS_MOM_READY */
	is_hello_t is_hello; /* IS_HELLO4 */
	is_discard_job_t is_discard; /* IS_DISCARD_JOB and IS_DISCARD_DONE */
	is_addr_info_t *is_addrs; /* IS_CLUSTER_ADDRS2 */
	is_update_from_hook_t is_update_hook; /* IS_UPDATE_FROM_HOOK and IS_UPDATE_FROM_HOOK2 */
	is_hj_action_t *is_actions; /* IS_HOOK_JOB_ACTION */
	is_hact_ack_t is_hact_ack; /* IS_HOOK_ACTION_ACK */
	char *is_user; /* IS_HOOK_SCHEDULER_RESTART_CYCLE */
	is_hook_chksums_t is_hchksums; /* IS_HOOK_CHECKSUMS */
	/* no info for IS_HELLO_NO_INVENTORY */
} is_req_t;

typedef struct pbs_is {
	int is_cmd;
	char *is_msgid;
	is_req_t *is_req;
	breq_t *is_breq; /* IS_CMD */
	breply_t *is_breply; /* IS_CMD_REPLY */
} pbs_is_t;
