namespace PBS.ifl;

enum ProtType:byte { Batch, TaskManager, RescManager, InterMoM, InterSvr }
enum batch_op:byte { SET, UNSET, INCR, DECR, EQ, NE, GE, GT, LE, LT, DFLT }

table Header {
	protType: ProtType = Batch;
	version: short;
	reqId: short;
	user: string;
}

table Attribute {
	name: string;
	resc: string;
	value: string;
	op: batch_op;
}

table Qjob {
	jobId: string;
	destin: string;
	attrs: [Attribute];
}

table JobFile {
	seq: long;
	type: short;
	size: long;
	jobId: string;
	data: string;
}

// FIXME: rename this to Text
table JobId {
	jobId: string;
}

table Manage {
	cmd: short;
	objType: short;
	objName: string;
	attrs: [Attribute];
}

table Msg {
	fileInd: short;
	jobId: string;
	text: string;
}

table Move {
	jobId: string;
	dest: string;
}

table Run {
	jobId: string;
	dest: string;
	resch: long;
}

table Select {
	selAttrs: [Attribute];
	rtnAttrs: [Attribute];
}

table DmnCmd {
	cmd: short;
}

table Signal {
	jobId: string;
	sigName: string;
}

table Stat {
	jobIds: string;
	attrs: [Attribute];
}

table Track {
	hops: short;
	jobId: string;
	location: string;
	state: byte;
}

table RescQuery {
	handle: short;
	queries: [string];
}

table Register {
	owner: string;
	parent: string;
	child: string;
	type: short;
	op: short;
	cost: long;
}

table FilePair {
	local: string;
	remote: string;
	flag: short;
}

table CopyFile {
	jobId: string;
	owner: string;
	user: string;
	group: string;
	flags: short;
	pairs: [FilePair];
}

table Cred {
	jobId: string;
	user: string;
	validity: long;
	type: short;
	size: short;
	data: string;
}

table CopyFileCred {
	files: CopyFile;
	// Can we use Cred here?
	type: short;
	cred: string;
}

table UserMigrate {
	tohost: string;
}

table SchedDefRep {
	cmd: short;
	id: string;
	err: short;
	text: string;
}

table Spawn {
	jobId: string;
	argv: [string];
	envp: [string];
}

// FIXME: we can merge this with JobFile
table CopyHook {
	seq: short;
	size: long;
	filename: string;
	data: string;
}

table RelNodes {
	jobId: string;
	nodes: string;
}

table PreemptJob {
	jid: string;
	order: string;
}

table Preempt {
	infos: [PreemptJob];
}

table Auth {
	authMethod: string;
	encryptMethod: string;
	encryptMode: ushort;
	port: ushort;
}

union ReqBody {
	Qjob, JobFile, JobId, Manage, Msg,
	Move, Run, Select, DmnCmd, Signal,
	Stat, Track, RescQuery, Register,
	CopyFile, Cred, CopyFileCred,
	UserMigrate, SchedDefRep, Spawn,
	CopyHook, RelNodes, Preempt, Auth
}

table Req {
	hdr: Header;
	body: ReqBody;
	extend: string;
}

table TextResp {
	txt: string;
}

table SelectResp {
	ids: [string];
}

table StatRespStat {
	type: short;
	name: string;
	attrs: [Attribute];
}

table StatResp {
	stats: [StatRespStat];
}

table RescQueryRespInfo {
	avail: short;
	alloc: short;
	resvd: short;
	down: short;
}

table RescQueryResp {
	infos: [RescQueryRespInfo];
}

union RespBody {
	TextResp, // jobid, text, location etc reponses
	SelectResp, // select reponses
	StatResp, // stat, cmdstat reponses
	RescQueryResp, // resource query reponses
	Preempt // preempt jobs reply
}

table Resp {
	code: short;
	auxCode: short;
	choice: short;
	body: RespBody;
}

table RmReq {
	hdr: Header;
	data: [string];
}

table RmResp {
	code: short;
	data: [string];
}

table TmAttach {
	user: string;
	uid: short;
	pid: short;
}

table TmSpawn {
	where: short;
	argv: [string];
	envp: [string];
}

table TmSignal {
	nid: short;
	tid: short;
	sig: short;
}

table TmObit {
	nid: short;
	tid: short;
}

table TmInfo {
	nid: short;
}

table TmPublish {
	name: string;
	info: string;
}

table TmSubscribe {
	nid: short;
	tid: short;
	name: string;
}

union TmBody { TmAttach, TmSpawn, TmSignal, TmObit, TmInfo, TmPublish, TmSubscribe }

table TmReq {
	hdr: Header;
	jobId: string;
	cookie: string;
	event: short;
	jobTid: short;
	body: TmBody;
}
